#!/bin/bash
#
# Wrapper to start and stop container of a PB.
# 

# Variant to run this script as root. Useful if docker group
# doesn't contain this user, but this script can be called
# without root password.
#
# Installation: 
#       1. Set RUN_WITH_SUDO on 1
#       2. Copy this file to /usr/local/bin/pitbossctl
#       3. Add your username to ./sudoers.d/99-pitbossctl and copy file
#           to /etc/sudoers.d/
#
#          (And change access on sudoers.d/99-pitbossctl file to 0440.)
#
RUN_WITH_SUDO=0

if [ "$RUN_WITH_SUDO" = "1" ] ; then
	if [ ! $USER = "root" ] ; then
		# This often fails due security policy
		# sudo --preserve-env=DOCKER,IMAGE,PATH_TO_CIV4,PATH_TO_CIV4,DOMAIN $0 "$@"

		# Handle ENV vars over above sudoers-file
		sudo $0 "$@"

		exit $?
	fi
	# Reset USER variable.
	USER=$SUDO_USER
fi


DOCKER="${DOCKER:-sudo docker}"
IMAGE="${IMAGE:-pbserver}"
PATH_TO_CIV4="${PATH_TO_CIV4:-/home/$USER/Civ4}"
PATH_TO_PBs="${PATH_TO_PBs:-/home/$USER/PBs}"
DOMAIN="${DOMAIN:-_https_pb.zulan.net}"


CMD="$1"
GAMEID="$2"
MOD_NAME="$3"
PORT1="$4"
PORT2="$5"
PORT3="$6"

# Command to find out container id.
CONTAINER="$DOCKER ps -q -n 1 --filter name=Civ4_${GAMEID}"

# Note:
# CONTAINER="$DOCKER ps -q -n 1 --filter 'name=Civ4_${GAMEID}'" 
# not works because docker parses 'name, not name ?!


print_help() {
	echo -e "$0 {COMMAND} {OPTIONS} with\n\tCOMMAND\tOPTIONS"
	echo -e "\tcreate\t\"{GAMEID}\" \"{MOD_NAME}\" {PB_SERVER_PORT} {PB_WWW_PORT} {PB_SHELL_PORT}"
	echo -e "\t\t Initialization for first run. Creates docker container named \"Civ4_{GAMEID}\"\n"
	echo -e "\tdelete\t\"{GAMEID} [--force]\" "
	echo -e "\t\t Removes docker container named \"Civ4_{GAMEID}\"\n"
	echo -e "\tlist [-a]"
	echo -e "\t\t lists GAMEID for docker container named \"Civ4_*\"\n"
	echo -e "\t\t Without -a only running instances will be listed.\n"
	echo -e "\tstart\t\"{GAMEID}\" \"[MOD_NAME}\" "
	echo -e "\tstop\t\"{GAMEID}\" "
	echo -e "\tshell\t\"{GAMEID}\" "
	echo -e "\t\t Open shell in running instance\"\n"
	echo -e "\tattach\t\"{GAMEID}\" "
	echo -e "\t\t Attaching to container\"\n"
	echo -e "\tid\t\"{GAMEID}\" "
	echo -e "\t\t Show container id\"\n"
	echo -e "\tports\t\"{GAMEID}\" "
	echo -e "\t\t List port mapping of game \"\n"
	echo -e "\tkill\t\"{GAMEID}\" "
	echo -e "\t\t Kills wine process, forcing restart.\"\n"
	echo -e "\tscreenshot \"{GAMEID}\" "
	echo -e "\t\t Creates and show (if feh is installed) screenshot of framebuffer."
}


if [ -z "$CMD" -o "$CMD" = "-h" -o "$CMD" = "--help" -o "$CMD" = "help" ] ; then
	echo "Usage:"
	print_help
	exit 0
fi

if [ "$CMD" = "list" ] ; then
	if [ "$2" == "-a" ] ; then
		ALL_FLAG="-a"
	fi
	$DOCKER ps $ALL_FLAG --filter="name=Civ4_" | sed -n  "s/.*Civ4_\([^ ]*\).*/\1/p"
	exit 0
fi

# All other commands require GAMEID
if [ -z "$GAMEID" ] ; then
	echo "No game id given"
	exit -1
fi

if [ "$CMD" = "create" ] ; then
	# Shell on PORT3 is restricted on localhost.
	# Without this restriction it would be exposed to the whole
	# internet even if the value in pbSettings.json is correct!
	$DOCKER create --name "Civ4_$GAMEID" \
		-e GAMEID="$GAMEID" \
		-e MOD_NAME="$MOD_NAME" \
		-e DOMAIN="$DOMAIN" \
		-e WINEDEBUG=fixme-all \
		-e NEW_UID="$(id -u $USER)" -e NEW_GID="$(id -g $USER)" \
		-v "$PATH_TO_CIV4:/app/Civ4" \
		-v "$PATH_TO_PBs:/altroot/PBs" \
		-p "$PORT1:$PORT1"   -p "$PORT2:$PORT2"  \
		-p "127.0.0.1:$PORT3:$PORT3" \
	  "${IMAGE}" \
		&& echo "Civ4_$GAMEID created. Use '$0 start $GAMEID' for startup."

elif [ "$CMD" = "delete" ] ; then
	if [ ! "$3" = "--force" ] ; then
		echo -e "This will delete the docker container 'Civ4_${GAMEID}'.\n" \
			"Are you sure? y/n"
		read DELETE_CONTAINER
		if [ "$DELETE_CONTAINER" != "y" ] ; then
			exit -1
		fi
	fi
	$DOCKER container rm "Civ4_${GAMEID}"

elif [ "$CMD" = "start" ] ; then
	if [ -n "$MOD_NAME" ] ; then
		echo "TODO: Changing the mod name after creation is currently not supported"
		echo "'docker start' does not allow to provide new environment variables..."
	fi
	$DOCKER container start "$($CONTAINER)"

elif [ "$CMD" = "debug" ] ; then
	$DOCKER container start -ai "$($CONTAINER)"

elif [ "$CMD" = "stop" ] ; then
	$DOCKER container stop "$($CONTAINER)"

elif [ "$CMD" = "shell" ] ; then
	$DOCKER exec -it "$($CONTAINER)" /bin/bash

elif [ "$CMD" = "screenshot" ] ; then
	$DOCKER exec -t -u civpb $($CONTAINER) /usr/local/bin/make-screenshot
	$DOCKER cp -L "$($CONTAINER):/tmp/popup_${GAMEID}.png" - \
		> "/tmp/popup_${GAMEID}.png"  # Piping may change file ownership

	if [ $? -eq 0 -a -n "$(which feh 2>/dev/null)" ] ; then
			if [ -n "$SUDO_USER" ] ; then
				sudo chown $SUDO_USER:$SUDO_USER "/tmp/popup_${GAMEID}.png"
				su $SUDO_USER feh "/tmp/popup_${GAMEID}.png"
			else
				feh "/tmp/popup_${GAMEID}.png"
			fi
		fi

elif [ "$CMD" = "id" ] ; then
	echo "$($CONTAINER)"

elif [ "$CMD" = "attach" ] ; then
	$DOCKER attach "$($CONTAINER)"

elif [ "$CMD" = "ports" ] ; then
	$DOCKER container port "$($CONTAINER)"

elif [ "$CMD" = "kill" ] ; then
	$DOCKER exec -t -u civpb $($CONTAINER) \
		/bin/bash -c "kill \"\$(pgrep Civ4BeyondSword)\""

else
	echo "Command '$CMD' not defined. Allowed commands:"
	print_help
fi
